(ns pallet.crate.ssh-key-test
  (:require
   [clojure.test :refer :all]
   [taoensso.timbre :as logging]
   [com.palletops.log-config.timbre :refer [with-context]]
   [pallet.actions :refer [directory exec-checked-script file remote-file user]]
   [pallet.build-actions :refer [build-plan]]
   [com.palletops.log-config.timbre :refer [logging-threshold-fixture]]
   [pallet.crate.ssh-key :refer :all]
   [pallet.group :refer [group-spec lift phase-errors]]
   [pallet.plan :refer [plan-context plan-fn]]
   [pallet.live-test :as live-test]
   [pallet.script.lib :as lib]
   [pallet.stevedore :as stevedore]
   [pallet.test-utils
    :refer [make-localhost-compute
            no-location-info
            no-source-line-comments
            test-username
            with-ubuntu-script-template]]
   [pallet.user :refer [*admin-user*]]
   [pallet.utils :refer [with-temp-file]]))

(use-fixtures
  :once
  with-ubuntu-script-template
  (logging-threshold-fixture)
  no-location-info
  no-source-line-comments)

(defn- local-test-user
  []
  (assoc *admin-user* :username (test-username) :no-sudo true))

(deftest authorize-key-test
  (is (= (with-context {:plan ["authorize-key"]}
           (build-plan [session {}]
             (directory
              session
              "$(getent passwd fred | cut -d: -f6)/.ssh/"
              {:owner "fred" :mode "755"})
             (file
              session
              "$(getent passwd fred | cut -d: -f6)/.ssh/authorized_keys"
              {:owner "fred" :mode "644"})
             (exec-checked-script
              session
              "authorize-key on user fred"
              (var auth_file
                   "$(getent passwd fred | cut -d: -f6)/.ssh/authorized_keys")
              (if-not ("fgrep" (quoted "key1") @auth_file)
                (println (quoted "key1") ">>" @auth_file)))
             (exec-checked-script
              session
              "Set selinux permissions"
              (~lib/selinux-file-type
               "$(getent passwd fred | cut -d: -f6)/.ssh/" "user_home_t"))))
         (build-plan [session {}]
           (authorize-key session "fred" "key1")))))

(deftest install-key-test
  (is (=
       (with-context {:plan ["install-key"]}
         (build-plan [session {}]
           (directory
            session "$(getent passwd fred | cut -d: -f6)/.ssh/"
            {:owner "fred" :mode "755"})
           (remote-file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/id"
            {:content "private" :owner "fred" :mode "600"})
           (remote-file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/id.pub"
            {:content "public" :owner "fred" :mode "644"})))
       (build-plan [session {}]
         (install-key session "fred" "id" "private" "public"))))
  (is (=
       (with-context {:plan ["install-key"]}
         (build-plan [session {}]
           (directory
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/"
            {:owner "fred" :mode "755"})
           (remote-file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/id"
            {:content "private" :owner "fred" :mode "600"})
           (remote-file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/id.pub"
            {:content "public" :owner "fred" :mode "644"})))
       (build-plan [session {}]
         (install-key session "fred" "id" "private" "public")))))

(deftest generate-key-test
  (is (=
       (build-plan [session {}]
         (plan-context 'generate-key
           (directory
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh"
            {:owner "fred" :mode "755"})
           (exec-checked-script
            session
            "ssh-keygen"
            (var key_path "$(getent passwd fred | cut -d: -f6)/.ssh/id_rsa")
            (if-not (file-exists? @key_path)
              ("ssh-keygen"
               ~(stevedore/map-to-arg-string
                 {:f (stevedore/script @key_path) :t "rsa" :N ""
                  :C "generated by pallet"}))))
           (file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/id_rsa"
            {:owner "fred" :mode "0600"})
           (file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/id_rsa.pub"
            {:owner "fred" :mode "0644"})))
       (build-plan [session {}]
         (generate-key session "fred"))))

  (is (=
       (with-context {:plan ["generate-key"]}
         (build-plan [session {}]
           (directory
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh"
            {:owner "fred" :mode "755"})
           (exec-checked-script
            session
            "ssh-keygen"
            (var key_path "$(getent passwd fred | cut -d: -f6)/.ssh/id_dsa")
            (if-not (file-exists? @key_path)
              ("ssh-keygen"
               ~(stevedore/map-to-arg-string
                 {:f (stevedore/script @key_path) :t "dsa" :N ""
                  :C "generated by pallet"}))))
           (file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/id_dsa"
            {:owner "fred" :mode "0600"})
           (file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/id_dsa.pub"
            {:owner "fred" :mode "0644"})))
       (build-plan [session {}]
         (generate-key session "fred" :type "dsa"))))

  (is (=
       (with-context {:plan ["generate-key"]}
         (build-plan [session {}]
           (directory
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh"
            {:owner "fred" :mode "755"})
           (exec-checked-script
            session
            "ssh-keygen"
            (var key_path "$(getent passwd fred | cut -d: -f6)/.ssh/identity")
            (if-not (file-exists? @key_path)
              ("ssh-keygen"
               ~(stevedore/map-to-arg-string
                 {:f (stevedore/script @key_path) :t "rsa1" :N ""
                  :C "generated by pallet"}))))
           (file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/identity"
            {:owner "fred" :mode "0600"})
           (file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/identity.pub"
            {:owner "fred" :mode "0644"})))
       (build-plan [session {}]
         (generate-key session "fred" :type "rsa1"))))

  (is (=
       (build-plan [session {}]
         (plan-context 'generate-key
           (exec-checked-script
            session
            "ssh-keygen"
            (var key_path "$(getent passwd fred | cut -d: -f6)/.ssh/c")
            (if-not (file-exists? @key_path)
              ("ssh-keygen"
               ~(stevedore/map-to-arg-string
                 {:f (stevedore/script @key_path)
                  :t "rsa1" :N "abc"  :C "my comment"}))))
           (file session "$(getent passwd fred | cut -d: -f6)/.ssh/c"
                 {:owner "fred" :mode "0600"})
           (file session "$(getent passwd fred | cut -d: -f6)/.ssh/c.pub"
                 {:owner "fred" :mode "0644"})))
       (build-plan [session {}]
         (generate-key
          session
          "fred" :type "rsa1" :filename "c" :no-dir true
          :comment "my comment" :passphrase "abc")))))

(deftest authorize-key-for-localhost-test
  (is (=
       (with-context {:plan ["authorize-key-for-localhost"]}
         (build-plan [session {}]
           (directory
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/"
            {:owner "fred" :mode "755"})
           (file
            session
            "$(getent passwd fred | cut -d: -f6)/.ssh/authorized_keys"
            {:owner "fred" :mode "644"})
           (exec-checked-script
            session
            "authorize-key"
            (var key_file
                 "$(getent passwd fred | cut -d: -f6)/.ssh/id_dsa.pub")
            (var auth_file
                 "$(getent passwd fred | cut -d: -f6)/.ssh/authorized_keys")
            (if-not ("grep" (quoted @("cat" @key_file)) @auth_file)
              (do
                (print (quoted "from=\\\"localhost\\\" ") ">>" @auth_file)
                ("cat" @key_file ">>" @auth_file))))))
       (build-plan [session {}]
         (authorize-key-for-localhost session "fred" "id_dsa.pub"))))

  (is (=
       (with-context {:plan ["authorize-key-for-localhost"]}
         (build-plan [session {}]
           (directory
            session
            "$(getent passwd tom | cut -d: -f6)/.ssh/"
            {:owner "tom" :mode "755"})
           (file
            session
            "$(getent passwd tom | cut -d: -f6)/.ssh/authorized_keys"
            {:owner "tom" :mode "644"})
           (exec-checked-script
            session
            "authorize-key"
            (var key_file
                 "$(getent passwd fred | cut -d: -f6)/.ssh/id_dsa.pub")
            (var auth_file
                 "$(getent passwd tom | cut -d: -f6)/.ssh/authorized_keys")
            (if-not ("grep" (quoted @("cat" @key_file)) @auth_file)
              (do
                (print (quoted "from=\\\"localhost\\\" ") ">>" @auth_file)
                ("cat" @key_file ">>" @auth_file))))))
       (build-plan [session {}]
         (authorize-key-for-localhost
          session
          "fred" "id_dsa.pub" :authorize-for-user "tom")))))

(deftest invoke-test
  (is (build-plan [session {}]
       (authorize-key session "user" "pk")
       (authorize-key-for-localhost session "user" "pk")
       (install-key session "user" "name" "pk" "pubk")
       (generate-key session "user"))))

(defn check-public-key
  [key]
  (fn [session]
    (logging/trace (format "check-public-key session is %s" session))
    (logging/debug (format "check-public-key key is %s" key))
    (is (string? key))
    [key session]))

(deftest config-test
  (with-temp-file [tmp ""]
    (let [compute (make-localhost-compute :group-name "local")
          session (lift
                   (group-spec "local" {})
                   :phase (plan-fn [session]
                            (config session
                                    "github.com" {"StrictHostKeyChecking" "no"}
                                    :config-file (.getPath tmp))
                            (config session
                                    "somewhere" {"StrictHostKeyChecking" "no"}
                                    :config-file (.getPath tmp))
                            (config session
                                    "github.com" {"StrictHostKeyChecking" "yes"}
                                    :config-file (.getPath tmp)))
                   :compute compute
                   :user (local-test-user))]
      (is (not (phase-errors session)))
      (is (= "Host somewhere\n  StrictHostKeyChecking = no\nHost github.com\n  StrictHostKeyChecking = yes\n"
             (slurp tmp))))))

(deftest live-test
  (live-test/test-for
   [image live-test/*images*]
   (let [automated-admin-user
         (var-get
          (resolve 'pallet.crate.automated-admin-user/automated-admin-user))]
     (live-test/test-nodes
      [compute node-map node-types]
      {:ssh-key
       {:image image
        :count 1
        :phases
        {:bootstrap (plan-fn [session]
                     (automated-admin-user session)
                     (user session "testuser"))
         :configure (plan-fn [session]
                      (generate-key session "testuser"))
         :verify1 (plan-fn [session]
                    (public-key session "testuser"))
         :verify2 (plan-fn [session]
                   (check-public-key session))}}}
      (lift (:ssh-key node-types)
                 :phase [:verify1 :verify2]
                 :compute compute)))))
