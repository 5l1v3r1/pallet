#+SETUPFILE: ../org-templates/level-1.org
#+TITLE:     Pallet Proposal -- Environment
#+DESCRIPTION: Pallet environment proposal
#+KEYWORDS: pallet environment parameters

*WARNING: This is a proposal*

When switching environments (i.e. from development to test to stage to
production) you do not want to update the node definitions, etc.

Environment specific values can be accessed using the environment concept.  The
environment concept is impemented is a parameter used in converge/lift, for
example: (converge ..... :environment dev-env), and propogated as
the :environment key in the request map.

The effective environment is made available to crates through the standard keys.

* :environment

The :pallet key of the environment map should be a hash map and will be
interpreted by pallet and can contain data to specify node templates, counts,
user names and compute service.

Arbitrary data can be specified on other keys, to be used by crates and node
definitions, and will not be interpreted by pallet.

** [:pallet :tags]

The :tags map contains overriding values specific to a tag. The map keys are the
tag names (as keywords).

- :image :: node template for the tag.  Inherits values from the definition
            in :defaults, and from the tag's `defnode`.

- :phases :: phases for the node. Inherits values from the definition
             in :defaults, and from the tag's `defnode`.

- :user :: admin user for the tag.  If not specified for a given tag, then falls
           back on the :user for the environment specified in :defaults.

- :compute :: compute service to use for the tag. If not specified for a given
              tag, then uses the :compute for the environment specified
              in :defaults.

- :blobstore :: blobstore service to use for the tag. If not specified for a
                given tag, then uses the :blobstore for the environment
                specified in :defaults.

- :count :: node count for the tag. If not specified for a given tag, then uses
            the value passed to converge.

** [:pallet :defaults]

The :defaults map contains overriding values for the whole call.

- :image :: node template for the environment. If specified, will be merged with
            the :image specificaion in a tag's `defnode`.

- :phases :: default phases for the environment.

- :user :: a default admin user for the environment. If not specified, then falls
           back on the :user passed to converge/lift.

- :compute :: compute service to use for the environment. If not specified, then
              uses the :compute passed to converge/lift.

- :blobstore :: blobstore service to use for the environment. If not specified,
                then uses the :blobstore passed to converge/lift.

- :algorithms :: algorithm seletion for pallet converge, lift, etc.

* effective keys

** converge and other phases
:count
:image
:user
:compute
:blobstore

** bootstrap
:target-count
:node-template
:user
:compute
:blobstore

* config.clj

The environment key from config.clj is propogated to the environment, as is
the environment key from within each each service definition map.
