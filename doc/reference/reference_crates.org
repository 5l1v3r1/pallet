#+SETUPFILE: ../org-templates/level-1.org
#+TITLE:     Pallet Reference - Crates
#+DESCRIPTION: Pallet reference documentation crates
#+KEYWORDS: pallet crates configuration

Crates are functions that encapsulate some unit of configuration or
administration. Every crate must take a first argument as a request map, and
must return an updated request map. Crates can take other arguments.

* Composing existing crates
The simplest way of creating a crate is to compose it from existing crates.

#+BEGIN_SRC clojure  :session s1
  (require 'pallet.resource.package)
  (require 'pallet.crate.git)
  (require 'pallet.crate.tomcat)

  (defn my-simple-config
    [request]
    (->
      request
      (pallet.resource.package/package "maven2")
      (pallet.crate.git/git)
      (pallet.crate.tomcat/tomcat)))
#+END_SRC

* Creating resources
=defresource= can be used to define script producing functions, that can then
be called in crates.

* Aggregate resource

=defaggregate= can be used to define resources that collect arguments over
multiple invocations and emit a resource based on the aggregated arguments.
This is used in the sudoers crate, for example, to emit /etc/sudoers.

* Local resources
=deflocal= defines a resource that will be run on the local machine.

* Parameters
* Delayed Arguments
* Templates
